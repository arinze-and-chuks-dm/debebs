---
// components
import BaseCard from "@components/SidebarCards/BaseCard.astro";
import PostCard from "@components/PostCard/PostCardVerticalSimple.astro";

// utils
import { getAllPosts, formatPosts } from "@js/blogUtils";

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  class?: string; // classes for the form
  headings: Heading[];
  levels?: 1 | 2 | 3; // how many levels of headers you want to show in TOC.
  rest?: any; // catch-all for any additional parameters, such as "aria-label"
}

const {
  headings,
  levels = 2,
  class: className,
  ...rest
} = Astro.props as Props;

// filter out all tags above depth level specified
const filteredHeadings = headings.filter((heading) => heading.depth <= levels);

const newClasses = className + " " + "text-start";

// console.log(JSON.stringify(headings, null, 4));
---

<BaseCard class={newClasses} {...rest}>
  <h3 class="text-light font-sans text-sm uppercase">Table of Contents</h3>
  <ul class="mt-4 flex flex-col gap-2">
    {
      filteredHeadings.map((heading) => (
        <li
          class:list={{
            "": heading.depth === 2,
            "pl-3": heading.depth === 3,
          }}
        >
          <a
            href={`#${heading.slug}`}
            class="toc-link font-light transition hover:text-primary-500"
          >
            {heading.text}
          </a>
        </li>
      ))
    }
  </ul>
</BaseCard>

<style lang="scss">
  .toc-current {
    @apply text-primary-600;
  }
</style>

<!-- uses intersection observer to highlight which heading is in view -->
<script>
  // Wrapper for Blog post content
  let wrappingElement: Element | null;
  let observeHeaderTags: IntersectionObserver;
  let allHeaderTags: NodeListOf<Element>;

  // Function that runs when the Intersection Observer fires
  function setCurrent(e: IntersectionObserverEntry[]) {
    var allSectionLinks = document.querySelectorAll(".toc-link");
    e.map((i) => {
      if (i.isIntersecting === true) {
        allSectionLinks.forEach((link) => link.classList.remove("toc-current"));

        // require the href matching, and ".toc-link" class
        // this is in case you have other header links elsewhere in the post
        const targetLink = document.querySelector(
          `a[href="#${i.target.id}"].toc-link`,
        );

        if (targetLink) targetLink.classList.add("toc-current");
      }
    });
  }

  function initTOC() {
    wrappingElement = document.querySelector(".prose");
    if (wrappingElement !== null) {
      // Get all H1/H2 tags from the post
      allHeaderTags = wrappingElement.querySelectorAll(
        ":scope > h1, :scope > h2, :scope > h3",
      );
    }

    // Intersection Observer Options
    let options: IntersectionObserverInit = {
      root: null,
      rootMargin: "0px 0px -50% 0px",
      threshold: [1],
    };

    // Each Intersection Observer runs setCurrent
    observeHeaderTags = new IntersectionObserver(setCurrent, options);
    if (wrappingElement === null) {
      return;
    }
    allHeaderTags.forEach((tag) => {
      // add scroll margin top to account for navbar
      tag.classList.add("scroll-mt-24");
      observeHeaderTags.observe(tag);
    });
  }

  // runs on initial page load
  initTOC();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", initTOC);
</script>
